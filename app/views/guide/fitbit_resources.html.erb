<ul class="pager">
  <li class="previous">
    <%= link_to "&larr; Using Fitgem".html_safe, using_fitgem_path %>
  </li>
  <!--<li class="next">
    <%= link_to "Fitbit Subscriptions &rarr;".html_safe, fitbit_subscriptions_path %>
  </li>-->
</ul>

<div class="page-header">
  <h1>Fitbit Resources</h1>
</div>

<p>
Fitbit considers a 'resource' to be any of the nouns associated with health tracking. Examples include foods consumed, activities participated in, characteristics of your tracker device, and body measurements.  From the <i class="icon-search"></i> <a href="https://wiki.fitbit.com/display/API/Fitbit+Resource+Access+API">Fitbit Resource API page</a>:
<blockquote>The Resource Access API is the main part of Fitbit API and contains of long list of REST endpoints that allow reading and modifying user resources via their URLs. Currently we provide methods to work with tracker collections and their metadata, profile and social resources and actions, user's device data and general system resources. The most basic example of resources are user's activities and food log entries.</blockquote>

</p>

<h2>Available Resources</h2>
<p>
Each resource below will include sample code on how to access it using fitgem. I will generally defer to the Fitbit Developer site for complete API documentation as I don't wish this site to get out of date too quickly.  Instead I'll focus on just the mechanics of using the library to interface with the API.
</p>

<p>
If you are logged into this site and have connected your login with a Fitbit account, then in each section you'll also see the relevant data retrieved using the API described there.
</p>

<div class="alert alert-info">
	<h4 class="alert-heading">Important!</h4>
	All code examples assume you already have access to an instance of the <code>Fitgem::Client</code> class, referred to as
	<code>client</code> in the code.  They include output as an example of the structure of the data that's returned; take care that
	the API may evolve so pay more attention to the structure than specific fields.
</div>

<h2>User Information</h2>
<p>
The user information interface is used to access whatever profile information that the user has allowed to be viewed publicly.  This includes information such as the user's name, fitbit user id, gender, height, etc.  <strong>Please note</strong> that the user must explicitly allow this info to be shared or else it will not show up in the data returned by the service.
</p>

<div class="alert alert-info">
	<i class="icon-book"></i>
	<a href="http://wiki.fitbit.com/display/API/API-Get-User-Info">View the Fitbit reference page for user information.</a>
</div>

<h3>Fetching User Information</h3>
<p>
The User Info resource includes information about the user's account, as well as the profile information (city, state, country, nickname).
The data is available under the 'user' key in the returned hash.
</p>
<pre class="prettyprint linenums">info = client.user_info['user']</pre>
<p>
The output (some data has been removed for obvious reasons):
</p>
<pre class="prettyprint linenums lang-ruby">p info
{"avatar"=>
  "http://cache.fitbit.com/7DEC9854-1E62-0DFF-C8E7-C932911A9D97_profile_100_square.png",
 "city"=>"Madison",
 "country"=>"US",
 "dateOfBirth"=>"****-**-**",
 "displayName"=>"whazzmaster",
 "distanceUnit"=>"en_US",
 "encodedId"=>"******",
 "fullName"=>"****** **********",
 "gender"=>"MALE",
 "glucoseUnit"=>"en_US",
 "height"=>69.01574803149606,
 "heightUnit"=>"en_US",
 "locale"=>"en_US",
 "memberSince"=>"****-**-**",
 "nickname"=>"whazzmaster",
 "offsetFromUTCMillis"=>-21600000,
 "state"=>"WI",
 "strideLengthRunning"=>0,
 "strideLengthWalking"=>0,
 "timezone"=>"America/Chicago",
 "waterUnit"=>"METRIC",
 "weight"=>***.**,
 "weightUnit"=>"en_US"}
</pre>

<h3>User Information Example</h3>
<p>
If you have connected your account with your fitbit account you will see live data displayed below.
</p>

<div class="fitbit-data-view" id="fitbit-user-data">Loading...</div>

<h2>Body Measurements<a name="body">&nbsp;</a></h2>
<p>
Body measurements include such things as weight, body fat percentage, and BMI. The availability of the body measurements resource is strictly controlled by the privacy settings by the fitbit user, but if they set access to public then they are available through the API. There are two methods dealing with body_measurements:
<table class="table">
  <tbody>
    <tr>
      <td><code>body_measurements_on_date(date)</code></td>
      <td>Fetch the body measurements for a specific date</td>
      <td><a href="http://rubydoc.info/github/whazzmaster/fitgem/Fitgem/Client:body_measurements_on_date"><i class="icon-info-sign"></i> Documentation</a></td>
    </tr>
    <tr>
      <td><code>log_body_measurements(options)</code></td>
      <td>Save body measurements for a specific date</td>
      <td><a href="http://rubydoc.info/github/whazzmaster/fitgem/Fitgem/Client:log_body_measurements"><i class="icon-info-sign"></i> Documentation</a></td>
    </tr>
  </tbody>
</table>
</p>

<div class="alert alert-info">
  <a class="icon-book"></i>
  <a href="http://wiki.fitbit.com/display/API/API-Get-Body-Measurements">View the Fitbit reference page for body measurements.</a>
</div>

<h3>Fetching Body Measurement Information</h3>
<p>
Fetching body measurement data is based on the date you're interested in.  Dates may be supplied as a Date,
DateTime, or a String in the format <code>yyyy-MM-dd</code>.  There are two special string values that are also
accepted: "today" and "yesterday."
</p>
<pre class="prettyprint linenums lang-ruby">body_measurements = client.body_measurements_on_date('today')</pre>

<p>
The output:
</p>
<pre class="prettyprint linenums lang-ruby">p body_measurements
{"body"=>
  {"bicep"=>0,
   "bmi"=>0,
   "calf"=>0,
   "chest"=>0,
   "fat"=>0,
   "forearm"=>0,
   "hips"=>0,
   "neck"=>0,
   "thigh"=>0,
   "waist"=>0,
   "weight"=>0},
 "goals"=>{"weight"=>165}}
</pre>

<h3>Saving Body Measurement Information</h3>
<p>
Saving body measurement information for a specific date involves a minimum of two pieces of information: the date to log for and
at least one piece of body measurement information. Dates may be supplied as a Date,
DateTime, or a String in the format <code>yyyy-MM-dd</code>.  There are two special string values that are also
accepted: "today" and "yesterday."
</p>
<pre class="prettyprint linenums lang-ruby">resp = client.log_body_measurements(:date => 'today', :weight => 190)</pre>

<p>
When saving body measurement information, you will either get a hash containing an "errors" key whose value is an array
of error information, or a hash containing the updated body information.
</p>
<pre class="prettyprint linenums lang-ruby">p resp
{"body"=>
  {"bicep"=>0,
   "bmi"=>28.05,
   "calf"=>0,
   "chest"=>0,
   "fat"=>25,
   "forearm"=>0,
   "hips"=>0,
   "neck"=>0,
   "thigh"=>0,
   "waist"=>0,
   "weight"=>190}}
</pre>

<h3>Body Measurements Example</h3>
<p>
If you have connected your account with your fitbit account you will see live data displayed below.
</p>

<div class="fitbit-data-view" id="fitbit-body-measurements-data">Loading...</div>

<h2>Activities</h2>
<p>
Using the fitgem methods activity information can be logged to the fitbit.com service, deleted from the service, and queried using various time-based or metadata-based methods.  The most useful pieces of information when working with activities are the <b>activity id</b>
and the <b>activity log id</b>.  The former refers to a definition of an activity, while the latter refers to the actual logging
of a specific activity for a user on a date.
</p>

<div class="alert alert-info">
  <i class="icon-book"></i>
	View the Fitbit reference page for <a href="http://wiki.fitbit.com/display/API/API-Log-Activity">logging</a> and <a href="http://wiki.fitbit.com/display/API/API-Get-Time-Series">retrieving</a> activity data.
</div>

<h3>Fetching Activity Information</h3>
<p>
Once you have an instance of the fitgem client object (for which <code>client.verified? == true</code> you have the ability to retrieve activity data in <strong>four ways</strong>.
</p>

<table class="table">
  <tbody>
    <tr>
      <td><code>frequent_activities()</code></td>
      <td>Fetch the current user's frequently logged activities</td>
      <td><a href="http://rubydoc.info/github/whazzmaster/fitgem/Fitgem/Client:frequent_activities"><i class="icon-info-sign"></i> Documentation</a></td>
    </tr>
    <tr>
      <td><code>recent_activities()</code></td>
      <td>Fetch the current user's recently logged activities</td>
      <td><a href="http://rubydoc.info/github/whazzmaster/fitgem/Fitgem/Client:recent_activities"><i class="icon-info-sign"></i> Documentation</a></td>
    </tr>
    <tr>
      <td><code>favorite_activities()</code></td>
      <td>Fetch the current user's favorite activities</td>
      <td><a href="http://rubydoc.info/github/whazzmaster/fitgem/Fitgem/Client:favorite_activities"><i class="icon-info-sign"></i> Documentation</a></td>
    </tr>
    <tr>
      <td><code>activities_on_date(date)</code></td>
      <td>Fetch all activities logged on a specified date</td>
      <td><a href="http://rubydoc.info/github/whazzmaster/fitgem/Fitgem/Client:activities_on_date"><i class="icon-info-sign"></i> Documentation</a></td>
    </tr>
  </tbody>
</table>

<pre class="prettyprint linenums lang-ruby">recent_activities = client.recent_activities
frequent_activities = client.frequent_activities
favorite_activities = client.favorite_activities
activities_today = client.activities_on_date('today')
activities_on_march_third = client.activities_on_date('2011-03-03')
</pre>

<p>The method <code>activities_on_date(date)</code> takes either a String in YYYY-MM-DD format, the strings 'today' or 'yesterday', or a Ruby Date object to retrieve relative dates.</p>

<p>The hash returned from the activities methods contains a list of the activities found in the query, as well as summary information about the activities.  An example is shown below (please note this is static data for illustration purposes.)</p>

<pre class="prettyprint linenums lang-ruby">{"activities"=>
  [{"activityId"=>1020,
    "activityParentId"=>90001,
    "activityParentName"=>"Bicycling",
    "calories"=>148,
    "description"=>"Leisurely - 10 to 11.9mph",
    "distance"=>3.93,
    "duration"=>1200000,
    "isFavorite"=>true,
    "logId"=>1529651,
    "name"=>"Bicycling",
    "startTime"=>"08:31"},
   {"activityId"=>2130,
    "activityParentId"=>2130,
    "activityParentName"=>
     "Weight lifting",
    "calories"=>222,
    "description"=>"",
    "distance"=>0,
    "duration"=>3600000,
    "isFavorite"=>true,
    "logId"=>1529653,
    "name"=>
     "Weight lifting",
    "startTime"=>"09:00"},
   {"activityId"=>1020,
    "activityParentId"=>90001,
    "activityParentName"=>"Bicycling",
    "calories"=>147,
    "description"=>"Leisurely - 10 to 11.9mph",
    "distance"=>3.92,
    "duration"=>1190000,
    "isFavorite"=>true,
    "logId"=>1529652,
    "name"=>"Bicycling",
    "startTime"=>"10:30"}],
 "summary"=>
  {"activeScore"=>443,
   "caloriesOut"=>1633,
   "distances"=>
    [{"activity"=>"total", "distance"=>10.04},
     {"activity"=>"tracker", "distance"=>2.19},
     {"activity"=>"loggedActivities", "distance"=>7.85},
     {"activity"=>"veryActive", "distance"=>0.58},
     {"activity"=>"moderatelyActive", "distance"=>1.3},
     {"activity"=>"lightlyActive", "distance"=>0.29},
     {"activity"=>"sedentaryActive", "distance"=>0},
     {"activity"=>
       "Weight lifting",
      "distance"=>0},
     {"activity"=>"Bicycling", "distance"=>7.85}],
   "fairlyActiveMinutes"=>104,
   "lightlyActiveMinutes"=>29,
   "sedentaryMinutes"=>730,
   "steps"=>4845,
   "veryActiveMinutes"=>22}}
</pre>

<p>There is much you can distill from the returned data; in addition to the list of logged activities you get access to total distances traveled during activities, total 'active core' (a Fitbit measure of how active you are over the course of the day), and an analysis (via the Fitbit tracker) of how your activities break down across the sedentary-to-highly-active spectrum.</p>


<h3>Logging Activity Information</h3>

<p>You may log completed activities for the user with the <code>log_activity</code> method.  It takes a hash of options (explained in more detail in the <a href="https://github.com/whazzmaster/fitgem/blob/master/lib/fitgem/activities.rb">comments</a>), and revolves around knowledge of the activity id.  See the <a href="http://wiki.fitbit.com/display/API/API-Log-Activity">fitbit documentation</a> for more information on the various types of activity id's.</p>

<p>The example below begins with the assumption that we know the activity id of the activity we want to log.  <strong>In practice</strong>, you'll likely need to search or browse for the activity by name to get the correct activity id.</p>

<pre class="prettyprint linenums lang-ruby">client.log_activity({
  :activityId => 1020, # Bicyling
  :durationMillis => 1320000,
  :startTime => "08:33",
  :date => "2011-07-12",
  :distance => "3.93",
  :distanceUnit => Fitgem::ApiDistanceUnit.miles
})
</pre>

<h3>Deleting Activity Information</h3>

<p>You can delete previously-logged activities if you have the id that was assigned to the logged activity.  The method call is straightforward; pass the logged-activity-id to <code>delete_logged_activity</code>.</p>

<h3>Removing a Favorite Activity</h3>

<p>It is also possible to remove an activity from a user's favorite activity list. Simply call <code>remove_favorite_activity</code> and pass in the activity id.</p>


<h2>Foods</h2>

<p>There are two aspects of foods that are tracked by Fitbit: the list of foods that can be used to log user meals, as well as food activity specific to a user.</p>

<h3>Food Search and Food Units</h3>

<div class="alert alert-info">
  <i class="icon-book"></i>
	View the Fitbit reference page for searching <a href="http://wiki.fitbit.com/display/API/API-Search-Foods">foods</a> and retrieving <a href="http://wiki.fitbit.com/display/API/API-Get-Food-Units">food units</a> for more information on the underlying REST API.
</div>

<p>Generally, in order to log a user's consumption of a specific food you will need to first get the food ID of the item from Fitbit. You then use the ID to refer to the food when subsequently logging it.  Use the food search API to get a list of potential foods from the Fitbit library.</p>

<p>In order to log food, you'll also need to supply the food unit to use.  Fitgem provides the <code>foods_units</code> method to retrieve the list of food units.</p>

<pre class="prettyprint linenums lang-ruby">@search_results = client.find_food('banana')
@food_units = client.foods_units
</pre>


<h3>Retrieving User Foods</h3>

<div class="alert alert-info">
  <i class="icon-book"></i>
	View the Fitbit reference page for retrieving <a href="http://wiki.fitbit.com/display/API/API-Get-Recent-Foods">recent</a>, <a href="http://wiki.fitbit.com/display/API/API-Get-Frequent-Foods">frequent</a>, or <a href="http://wiki.fitbit.com/display/API/API-Get-Favorite-Foods">favorite</a> food data for a specific user for more information on the underlying REST API..</a>
</div>

<p>Much like when working with activities a user's food preferences can be access via the recent, frequent, or favorite metadata collections.</p>

<pre class="prettyprint linenums lang-ruby">@recent_foods = client.recent_foods
@frequent_foods = client.frequent_foods
@favorite_foods = client.favorite_foods
</pre>

<h3>Logging User Foods</h3>

<div class="alert alert-info">
  <i class="icon-book"></i>
	View the Fitbit reference page for <a href="http://wiki.fitbit.com/display/API/API-Log-Food">logging users' foods</a> for more information on the underlying REST API.
</div>

<p>To log the consumption of a food item, you must supply several IDs of items that would be found through searching for foods or through the metadata collections (recent, frequent, or favorites). </p>

<pre class="prettyprint linenums lang-ruby">client.log_food({
  :foodId => 81170, # BACON!
  :mealTypeId => 1, # Breakfast!
  :unitId => 311,
  :amount => 1,
  :date => "2011-08-01"
})
</pre>

<h3>Creating User Foods</h3>

<div class="alert alert-info">
  <i class="icon-book"></i>
	View the Fitbit reference page for <a href="http://wiki.fitbit.com/display/API/API-Create-Food">creating users' foods</a> for more information on the underlying REST API.
</div>

<p>Sometimes a user may wish to log a food that isn't in the official list you can query through Fitbit.  You can use the <code>create_food</code> method to create private foods to log.  The API doesn't expose as many options for customizing created foods as the Fitbit website does, but it will allow you create a basic food profile that can be expanded later via the website.</p>

<pre class="prettyprint linenums lang-ruby">client.create_food({
  :name => "Amplified Wheybolic Extreme 60 (Cookies & Cream)",
  :defaultFoodMeasurementUnitId => "301",
  :defaultServingSize => "3",
  :calories => "280",
  :formType => "DRY",
  :description => "Protein shake mix"
})
</pre>

<h3>Deleting User Foods</h3>

<div class="alert alert-info">
  <i class="icon-book"></i>
	View the Fitbit reference page for <a href="http://wiki.fitbit.com/display/API/API-Delete-Food-Log">deleting users' food logs</a> and <a href="http://wiki.fitbit.com/display/API/API-Delete-Favorite-Food">removing a food from users' favorites list</a> for more information on the underlying REST API.
</div>

<p>There are two food-related items that can be deleted through the API: a user's food log can be deleted, and a specific food can be removed from a user's favorites list.</p>

<p>To delete a user's food log, you must have a reference to the food log ID that was assigned to it when it was created.</p>

<p>To remove a food from a user's favorites list, you must have the ID of the food to remove.</p>

<script type="text/javascript">$(document).ready(function(){FitgemClient.init({logged_in:<%= user_signed_in? %>,linked:<%= user_signed_in? && current_user.linked? %>});});</script>
