<h1>Resource Access API</h1>

<div class="alert alert-info">
	<i class="icon-book"></i> View <a href="http://wiki.fitbit.com/display/API/Resource-Access-API">fitbit.com's resource access API</a> documentation.
</div>

<p>Fitbit considers a 'resource' to be any of the nouns associated with health tracking. Examples include foods consumed, activities participated in, characteristics of your tracker device, and body measurements.</p>

<h2>Available Resources<a name="start">&nbsp;</a></h2>
<p>Each resource below will include sample code on how to access it using fitgem. I will generally defer to the Fitbit Developer site for complete API documentation as I don't wish this site to get out of date too quickly.  Instead I'll focus on just the mechanics of using the library to interface with the API.</p>
<p>If you are logged into the site and have connected your login with a Fitbit account, then in each section you'll also see the relevant data retrieved using the API described there.</p>

<h2>User Information<a name="userinfo">&nbsp;</a></h2>

<p>The user information interface is used to access whatever profile information that the user has allowed to be viewed publicly.  This includes information such as the user's name, fitbit user id, gender, height, etc.  <strong>Please note</strong> that the user must explicitly allow this info to be shared or else it will not show up in the data returned by the service.</p>

<div class="alert alert-info">
	<i class="icon-book"></i> <a href="http://wiki.fitbit.com/display/API/API-Get-User-Info">View the Fitbit reference page for user information.</a>
</div>

<h3>Retrieving User Information<a name="retrievinguserinfo">&nbsp;</a></h3>
<p>In your controller action, for example:</p>
<pre>def index
  unless current_user.fitbit_account.verified?
    flash[:alert] = "Your test account is not connected to a Fitbit account."
    redirect_to :action => :index and return
  end
  client = FitgemClientWrapper.new(current_user.fitbit_account)
  @info = client.user_info['user']
end</pre>


<h3>User Information in a View<a name="userinfoinaview">&nbsp;</a></h3>
<p>Below is example ERB code showing how the <code>@info</code> object is used in a view.</p>
<pre>&lt;div class=&quot;fitbit-api-data&quot;&gt;
  &lt;div class=&quot;line-title&quot;&gt;User Information from Fitbit.com&lt;/div&gt;
  &lt;div class=&quot;line-item&quot;&gt;
    &lt;div class=&quot;label&quot;&gt;User Id:&lt;/div&gt;
    &lt;div class=&quot;value&quot;&gt;&lt;%= @info[&#x27;encodedId&#x27;] %&gt;&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;line-item&quot;&gt;
    &lt;div class=&quot;label&quot;&gt;Display Name:&lt;/div&gt;
    &lt;div class=&quot;value&quot;&gt;&lt;%= @info[&#x27;displayName&#x27;] %&gt;&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;line-item&quot;&gt;
    &lt;div class=&quot;label&quot;&gt;City:&lt;/div&gt;
    &lt;div class=&quot;value&quot;&gt;&lt;%= @info[&#x27;city&#x27;] %&gt;&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;line-item&quot;&gt;
    &lt;div class=&quot;label&quot;&gt;State:&lt;/div&gt;
    &lt;div class=&quot;value&quot;&gt;&lt;%= @info[&#x27;state&#x27;] %&gt;&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;line-item&quot;&gt;
    &lt;div class=&quot;label&quot;&gt;Gender:&lt;/div&gt;
    &lt;div class=&quot;value&quot;&gt;&lt;%= @info[&#x27;gender&#x27;] %&gt;&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;line-item&quot;&gt;
    &lt;div class=&quot;label&quot;&gt;Date of Birth:&lt;/div&gt;
    &lt;div class=&quot;value&quot;&gt;&lt;%= @info[&#x27;dateOfBirth&#x27;] %&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;</pre>


<h3>User Information Example<a name="userinfoexample">&nbsp;</a></h3>

<p>Below are the results of the above view code using your personal fitbit data.</p>

<div id="fitbit-user-data">Loading...</div>

<h2>Body Measurements<a name="body">&nbsp;</a></h2>

<div class="alert alert-info">
  <a class="icon-book"></i> <a href="http://wiki.fitbit.com/display/API/API-Get-Body-Measurements">View the Fitbit reference page for body measurements.</a>
</div>

<p>Body measurements include such things as weight and BMI. The availability of the body measurements resource is strictly controlled by the privacy settings by the fitbit user, but if they set access to public then they are available through the API.</p>

<h3>Getting Access to Body Measurement Information</h3>

<p>In your controller action, for example:</p>

<pre>def index
  unless current_user.fitbit_account.verified?
    flash[:alert] = "Your test account is not connected to
      a Fitbit account."
    redirect_to :action => :index and return
  end
  client = FitgemClientWrapper.new(current_user.fitbit_account)
  @body_measurements = client.body_measurements_on_date('today')['user']
end</pre>


<h3>Body Measurements in a View</h3>

<p>Below is example ERB code showing how the <code>@body_measurements</code> object is used in a view.</p>

<pre>
&lt;div class=&quot;fitbit-api-data&quot;&gt;
  &lt;div class=&quot;line-title&quot;&gt;
    Body Measurement Information from Fitbit.com
  &lt;/div&gt;
  &lt;div class=&quot;line-item&quot;&gt;
    &lt;div class=&quot;label&quot;&gt;Today&#x27;s Weight:&lt;/div&gt;
    &lt;div class=&quot;value&quot;&gt;
      &lt;%= @body_measurements[&#x27;body&#x27;][&#x27;weight&#x27;] if @body_measurements
        &amp;&amp; @body_measurements[&#x27;body&#x27;] &amp;&amp;
        @body_measurements[&#x27;body&#x27;][&#x27;weight&#x27;] %&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
</pre>


<h5>Body Measurements Example</h5>
<p>Below are the results of the above view code using your personal fitbit data. You may not see anything here if you have not flagged weight for public view.</p>
<% if user_signed_in? && current_user.fitbit_account.verified? %>

  <div class="fitbit-api-data">
    <div class="source">Live from Fitbit.com</div>
    <div class="line-title">Body Measurement Information</div>
    <div class="line-item">
  		<div class="label">Today's Weight:</div>
  		<div class="value">
  		  <%= @body_measurements['body']['weight'] if @body_measurements && @body_measurements['body'] && @body_measurements['body']['weight'] %>
  		</div>
  	</div>
  	<div class="end">&nbsp;</div>
  </div>

  <div style="clear:both;">&nbsp;</div>
<% elsif user_signed_in? %>
  <%= render :partial => 'examples/link_or_review' %>
<% else %>
  <%= render :partial => 'examples/login_and_link' %>
<% end %>


<h4><a name="activities">Activities</a></h4>
<div class="information-box">
	<p>View the Fitbit reference page for <a href="http://wiki.fitbit.com/display/API/API-Log-Activity">logging</a> and <a href="http://wiki.fitbit.com/display/API/API-Get-Time-Series">retrieving</a> activity data.</a></p>
</div>
<p>Activity data can be logged to the fitbit.com service, deleted from the service, and queried using various time-based or metadata-based methods.</p>

<h5><a name="retrieving-activities">Retrieving Activity Information</a></h5>
<p>Once you have an instance of the fitgem client object (for which <code>client.verified? == true</code> you have the ability to retrieve activity data in <strong>four ways</strong>.</p>
<ul>
  <li>Time series (custom date ranges)</li>
  <li>Recent activities</li>
  <li>Frequent activities</li>
  <li>Favorite activities</li>
</ul>
<pre>
unless current_user.fitbit_account.verified?
  flash[:alert] = "Your test account is not connected to
    a Fitbit account."
  redirect_to :action => :index and return
end
client = FitgemClientWrapper.new(current_user.fitbit_account)
@recent_activities = client.recent_activities
@frequent_activities = client.frequent_activities
@favorite_activities = client.favorite_activities
@activities_today = client.activities_on_date('today')
@activities_on_march_third = client.activities_on_date('2011-03-03')
</pre>
<p>The method <code>activities_on_date(date)</code> takes either a String in YYYY-MM-DD format, the strings 'today' or 'yesterday', or a Ruby Date object to retrieve relative dates.</p>
<p>The hash returned from the activities methods contains a list of the activities found in the query, as well as summary information about the activities.  An example is shown below (please note this is static data for illustration purposes.)</p>
<pre>
{"activities"=>
  [{"activityId"=>1020,
    "activityParentId"=>90001,
    "activityParentName"=>"Bicycling",
    "calories"=>148,
    "description"=>"Leisurely - 10 to 11.9mph",
    "distance"=>3.93,
    "duration"=>1200000,
    "isFavorite"=>true,
    "logId"=>1529651,
    "name"=>"Bicycling",
    "startTime"=>"08:31"},
   {"activityId"=>2130,
    "activityParentId"=>2130,
    "activityParentName"=>
     "Weight lifting",
    "calories"=>222,
    "description"=>"",
    "distance"=>0,
    "duration"=>3600000,
    "isFavorite"=>true,
    "logId"=>1529653,
    "name"=>
     "Weight lifting",
    "startTime"=>"09:00"},
   {"activityId"=>1020,
    "activityParentId"=>90001,
    "activityParentName"=>"Bicycling",
    "calories"=>147,
    "description"=>"Leisurely - 10 to 11.9mph",
    "distance"=>3.92,
    "duration"=>1190000,
    "isFavorite"=>true,
    "logId"=>1529652,
    "name"=>"Bicycling",
    "startTime"=>"10:30"}],
 "summary"=>
  {"activeScore"=>443,
   "caloriesOut"=>1633,
   "distances"=>
    [{"activity"=>"total", "distance"=>10.04},
     {"activity"=>"tracker", "distance"=>2.19},
     {"activity"=>"loggedActivities", "distance"=>7.85},
     {"activity"=>"veryActive", "distance"=>0.58},
     {"activity"=>"moderatelyActive", "distance"=>1.3},
     {"activity"=>"lightlyActive", "distance"=>0.29},
     {"activity"=>"sedentaryActive", "distance"=>0},
     {"activity"=>
       "Weight lifting",
      "distance"=>0},
     {"activity"=>"Bicycling", "distance"=>7.85}],
   "fairlyActiveMinutes"=>104,
   "lightlyActiveMinutes"=>29,
   "sedentaryMinutes"=>730,
   "steps"=>4845,
   "veryActiveMinutes"=>22}}
</pre>
<p>There is much you can distill from the returned data; in addition to the list of logged activities you get access to total distances traveled during activities, total 'active core' (a Fitbit measure of how active you are over the course of the day), and an analysis (via the Fitbit tracker) of how your activities break down across the sedentary-to-highly-active spectrum.</p>


<h5><a name="logging-activities">Logging Activity Information</a></h5>
<p>You may log completed activities for the user with the <code>log_activity</code> method.  It takes a hash of options (explained in more detail in the <a href="https://github.com/whazzmaster/fitgem/blob/master/lib/fitgem/activities.rb">comments</a>), and revolves around knowledge of the activity id.  See the <a href="http://wiki.fitbit.com/display/API/API-Log-Activity">fitbit documentation</a> for more information on the various types of activity id's.</p>
<p>The example below begins with the assumption that we know the activity id of the activity we want to log.  <strong>In practice</strong>, you'll likely need to search or browse for the activity by name to get the correct activity id.</p>
<pre>
unless current_user.fitbit_account.verified?
  flash[:alert] = "Your test account is not connected to
    a Fitbit account."
  redirect_to :action => :index and return
end
client = FitgemClientWrapper.new(current_user.fitbit_account)
client.log_activity({
  :activityId => 1020, # Bicyling
  :durationMillis => 1320000,
  :startTime => "08:33",
  :date => "2011-07-12",
  :distance => "3.93",
  :distanceUnit => Fitgem::ApiDistanceUnit.miles
})
</pre>


<h5><a name="removing-activities">Deleting Activity Information</a></h5>
<h6>Deleting a Logged Activity</h6>
<p>You can delete previously-logged activities if you have the id that was assigned to the logged activity.  The method call is straightforward; pass the logged-activity-id to <code>delete_logged_activity</code>.</p>
<h6>Removing a Favorite Activity</h6>
<p>It is also possible to remove an activity from a user's favorite activity list. Simply call <code>remove_favorite_activity</code> and pass in the activity id.</p>


<h4><a name="foods">Foods</a></h4>
<p>There are two aspects of foods that are tracked by Fitbit: the list of foods that can be used to log user meals, as well as food activity specific to a user.</p>


<h5><a name="search-foods">Food Search and Food Units</a></h5>
<div class="information-box">
	<p>View the Fitbit reference page for searching <a href="http://wiki.fitbit.com/display/API/API-Search-Foods">foods</a> and retrieving <a href="http://wiki.fitbit.com/display/API/API-Get-Food-Units">food units</a> for more information on the underlying REST API.</p>
	<p><a href="https://github.com/whazzmaster/fitgem/blob/master/lib/fitgem/foods.rb">View the fitgem code for foods</a> to learn more about the Ruby API.</p>
</div>
<p>Generally, in order to log a user's consumption of a specific food you will need to first get the food ID of the item from Fitbit. You then use the ID to refer to the food when subsequently logging it.  Use the food search API to get a list of potential foods from the Fitbit library.</p>
<p>In order to log food, you'll also need to supply the food unit to use.  Fitgem provides the <code>foods_units</code> method to retrieve the list of food units.</p>
<pre>
unless current_user.fitbit_account.verified?
  flash[:alert] = "Your test account is not connected to
    a Fitbit account."
  redirect_to :action => :index and return
end
client = FitgemClientWrapper.new(current_user.fitbit_account)
@search_results = client.find_food('banana')
@food_units = client.foods_units
</pre>


<h5><a name="retrieving-user-foods">Retrieving User Foods</a></h5>
<div class="information-box">
	<p>View the Fitbit reference page for retrieving <a href="http://wiki.fitbit.com/display/API/API-Get-Recent-Foods">recent</a>, <a href="http://wiki.fitbit.com/display/API/API-Get-Frequent-Foods">frequent</a>, or <a href="http://wiki.fitbit.com/display/API/API-Get-Favorite-Foods">favorite</a> food data for a specific user for more information on the underlying REST API..</a></p>
	<p><a href="https://github.com/whazzmaster/fitgem/blob/master/lib/fitgem/foods.rb">View the fitgem code for foods</a> to learn more about the Ruby API.</p>
</div>
<p>Much like <a href="#activities">activities</a>, a user's food preferences can be access via the recent, frequent, or favorite metadata collections.</p>
<pre>
unless current_user.fitbit_account.verified?
  flash[:alert] = "Your test account is not connected to
    a Fitbit account."
  redirect_to :action => :index and return
end
client = FitgemClientWrapper.new(current_user.fitbit_account)
@recent_foods = client.recent_foods
@frequent_foods = client.frequent_foods
@favorite_foods = client.favorite_foods
</pre>


<h5><a name="logging-user-foods">Logging User Foods</a></h5>
<div class="information-box">
	<p>View the Fitbit reference page for <a href="http://wiki.fitbit.com/display/API/API-Log-Food">logging users' foods</a> for more information on the underlying REST API..</p>
	<p><a href="https://github.com/whazzmaster/fitgem/blob/master/lib/fitgem/foods.rb">View the fitgem code for foods</a> to learn more about the Ruby API.</p>
</div>
<p>To log the consumption of a food item, you must supply several IDs of items that would be found through <a href="#search-foods">searching for foods</a> or through the <a href="#retrieving-users-foods">metadata collections (recent, frequent, or favorites)</a>. </p>
<pre>
unless current_user.fitbit_account.verified?
  flash[:alert] = "Your test account is not connected to
    a Fitbit account."
  redirect_to :action => :index and return
end
client = FitgemClientWrapper.new(current_user.fitbit_account)
client.log_food({
  :foodId => 81170, # BACON!
  :mealTypeId => 1, # Breakfast!
  :unitId => 311,
  :amount => 1,
  :date => "2011-08-01"
})
</pre>


<h5><a name="creating-user-foods">Creating User Foods</a></h5>
<div class="information-box">
	<p>View the Fitbit reference page for <a href="http://wiki.fitbit.com/display/API/API-Create-Food">creating users' foods</a> for more information on the underlying REST API..</p>
	<p><a href="https://github.com/whazzmaster/fitgem/blob/master/lib/fitgem/foods.rb">View the fitgem code for foods</a> to learn more about the Ruby API.</p>
</div>
<p>Sometimes a user may wish to log a food that isn't in the official list you can query through Fitbit.  You can use the <code>create_food</code> method to create private foods to log.  The API doesn't expose as many options for customizing created foods as the Fitbit website does, but it will allow you create a basic food profile that can be expanded later via the website.</p>
<pre>
unless current_user.fitbit_account.verified?
  flash[:alert] = "Your test account is not connected to
    a Fitbit account."
  redirect_to :action => :index and return
end
client = FitgemClientWrapper.new(current_user.fitbit_account)
client.create_food({
  :name => "Amplified Wheybolic Extreme 60 (Cookies & Cream)",
  :defaultFoodMeasurementUnitId => "301",
  :defaultServingSize => "3",
  :calories => "280",
  :formType => "DRY",
  :description => "Protein shake mix"
})
</pre>


<h5><a name="deleting-user-foods">Deleting User Foods</a></h5>
<div class="information-box">
	<p>View the Fitbit reference page for <a href="http://wiki.fitbit.com/display/API/API-Delete-Food-Log">deleting users' food logs</a> and <a href="http://wiki.fitbit.com/display/API/API-Delete-Favorite-Food">removing a food from users' favorites list</a> for more information on the underlying REST API.</p>
	<p><a href="https://github.com/whazzmaster/fitgem/blob/master/lib/fitgem/foods.rb">View the fitgem code for foods</a> to learn more about the Ruby API.</p>
</div>
<p>There are two food-related items that can be deleted through the API: a user's food log can be deleted, and a specific food can be removed from a user's favorites list.</p>
<p>To delete a user's food log, you must have a reference to the food log ID that was assigned to it when it was created.</p>
<p>To remove a food from a user's favorites list, you must have the ID of the food to remove.</p>

<script type="text/javascript">$(document).ready(function(){FitgemClient.init({logged_in:<%= user_signed_in? %>,linked:<%= user_signed_in? && current_user.fitbit_account.verified? %>});});</script>